test_base_model.py

class TestBaseModel(unittest.TestCase):
    """ Run all the tests for the base_model """

    def test_init_with_args(self):
        # Test initialization with arguments
        kwargs = {
            'created_at': '2022-01-01T12:00:00.000000',
            'updated_at': '2022-01-01T14:00:00.000000',
            'other_key': 'other_value'
        }
        instance = BaseModel(**kwargs)

        # Checks
        self.assertEqual(instance.created_at, datetime(2022, 1, 1, 12, 0, 0))
        self.assertEqual(instance.updated_at, datetime(2022, 1, 1, 14, 0, 0))
        self.assertEqual(instance.other_key, 'other_value')

    def test_init_without_args(self):
        # Test initialization without arguments
        instance = BaseModel()

        # Checks
        self.assertTrue(hasattr(instance, 'id'))
        self.assertTrue(hasattr(instance, 'created_at'))
        self.assertTrue(hasattr(instance, 'updated_at'))
        self.assertTrue(isinstance(instance.id, str))
        self.assertTrue(isinstance(instance.created_at, datetime))
        self.assertTrue(isinstance(instance.updated_at, datetime))

    def test_str_method(self):
        # Test the __str__ method
        instance = BaseModel()
        instance_str = str(instance)

        # Checks
        self.assertIn(instance.__class__.__name__, instance_str)
        self.assertIn(instance.id, instance_str)
        self.assertIn(str(instance.__dict__), instance_str)

    def test_save_method(self):
        # Test the save method
        instance = BaseModel()
        initial_updated_at = instance.updated_at
        instance.save()

        # Checks
        self.assertNotEqual(initial_updated_at, instance.updated_at)

    def test_to_dict_method(self):
        # Test the to_dict method
        instance = BaseModel()
        instance_dict = instance.to_dict()

        # Checks
        self.assertTrue('__class__' in instance_dict)
        self.assertTrue('created_at' in instance_dict)
        self.assertTrue('updated_at' in instance_dict)
        self.assertEqual(instance_dict['__class__'], instance.__class__.__name__)
        self.assertEqual(instance_dict['created_at'], instance.created_at.isoformat())
        self.assertEqual(instance_dict['updated_at'], instance.updated_at.isoformat())

if __name__ == '__main__':
    unittest.main()






test_file_storage.py

class TestFileStorage(unittest.TestCase):
    def setUp(self):
        # Set up a clean state before each test
        FileStorage._FileStorage__objects = {}
    def test_all_method(self):
        # Test the all method
        file_storage = FileStorage()
        all_objects = file_storage.all()

        # Checks
        self.assertIsInstance(all_objects, dict)
        self.assertEqual(all_objects, FileStorage._FileStorage__objects)

    def test_new_method(self):
        # Test the new method
        file_storage = FileStorage()
        obj = BaseModel()
        file_storage.new(obj)

        # Checks
        key = obj.__class__.__name__ + "." + obj.id
        self.assertTrue(key in FileStorage._FileStorage__objects)
        self.assertEqual(FileStorage._FileStorage__objects[key], obj)

    def test_save_and_reload_methods(self):
        # Test the save and reload methods
        file_storage = FileStorage()

        # Add an object to FileStorage
        obj = BaseModel()
        file_storage.new(obj)

        # Save the objects to file
        file_storage.save()

        # Clear objects from FileStorage
        FileStorage._FileStorage__objects = {}

        # Reload the objects from file
        file_storage.reload()

        # Checks
        key = obj.__class__.__name__ + "." + obj.id
        self.assertTrue(key in FileStorage._FileStorage__objects)
        reloaded_obj = FileStorage._FileStorage__objects[key]
        self.assertEqual(reloaded_obj.id, obj.id)
        self.assertEqual(reloaded_obj.created_at, obj.created_at)
        self.assertEqual(reloaded_obj.updated_at, obj.updated_at)

    def test_reload_method_without_file(self):
        # Test the reload method when the file does not exist
        file_path = FileStorage._FileStorage__file_path
        if os.path.exists(file_path):
            os.remove(file_path)

        file_storage = FileStorage()
        file_storage.reload()

        # Checks
        self.assertEqual(FileStorage._FileStorage__objects, {})

    if __name__ == '__main__':
        unittest.main()